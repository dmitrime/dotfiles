set nocompatible
set modelines=0
filetype off

" vundle setup
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" Let Vundle manage itself
Plugin 'VundleVim/Vundle.vim'

" Plugins
Plugin 'mileszs/ack.vim'
Plugin 'vim-scripts/swap-parameters'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'wincent/Command-T'
Plugin 'fatih/vim-go'
" Plugin 'kien/ctrlp.vim'
" Plugin 'kevinw/pyflakes-vim'
Plugin 'nvie/vim-flake8'
"Plugin 'vim-scripts/pep8'
"Plugin 'sontek/rope-vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'msanders/snipmate.vim'
" Plugin 'ervandew/supertab'
Plugin 'majutsushi/tagbar'
Plugin 'bufexplorer.zip'
Plugin 'vim-scripts/py_jump.vim'
Plugin 'kovisoft/slimv'
Plugin 'ConradIrwin/vim-bracketed-paste'
Plugin 'tpope/vim-fireplace'
Plugin 'guns/vim-clojure-static'
" Plugin 'vim-airline/vim-airline'
Plugin 'vim-syntastic/syntastic'
Plugin 'vim-scripts/paredit.vim'

call vundle#end()


filetype plugin indent on

set encoding=utf-8

" Tabs
set shiftwidth=4
set tabstop=4
set expandtab
syn on

" Indent
set autoindent
" Show curson row,col
set ruler
" Show line numbers
set number
" Fast terminal connection
set ttyfast
" Command completion menu on tab
set wildmenu
" Current cursor line
"set cursorline
" Show command being currently typed
set showcmd
" Place a marker when folding
set foldmethod=marker
" Scroll +2 lines
set scrolloff=2
" Show status line always
set laststatus=2 statusline=%02n:%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
" Hidden buffer
set hidden

" Undo files even after saving
set undofile
set undodir=~/.vim/sessions/undo
" Backup dir
set backupdir=~/.vim/sessions
set dir=~/.vim/sessions

" Comma leader
let mapleader=","
" Go to row + col for mark
nnoremap ' `


" Search
" Ignore case...
set ignorecase
" But use case when there is uppercase in string
set smartcase
" Incremental search with match-as-you-type
set incsearch
set showmatch
" No highlighting
set nohlsearch
" Paste toggle
set pastetoggle=<F2>

" Substitute globally on lines
set gdefault

" Wrap lines
" set wrap
"set textwidth=79

" Stop hitting F1 when aiming for ESC
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Make ; be : in normal mode
nnoremap ; :

" Just like D
nnoremap Y y$

" Quickly select pasted text
nnoremap <leader>v V`]
" Quickly open ~/.vimrc
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>
nnoremap <leader>eb <C-w><C-v><C-l>:e ~/.bashrc<cr>
" Quick vertical split window
nnoremap <leader>w <C-w>v<C-w>l
" Quick horizontal split window
nnoremap <leader>W <C-w>s
" Move around windows easier
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Make window wider or narrower
nnoremap <C-W>h 10<C-W><
nnoremap <C-W>l 10<C-W>>
nnoremap <C-W>j 10<C-w>-
nnoremap <C-W>k 10<C-w>+

" Buffers
nnoremap <leader>x :bprev<CR>
nnoremap <leader>c :bnext<CR>
nnoremap <leader>d :bd<CR>
nnoremap <leader>D :b#<CR>

" set autochdir
" Toggle command-t
nnoremap <leader>t :CommandT<CR>
" Toggle nerdtree
nnoremap <leader>T :NERDTreeToggle<CR>
" Toggle tagbar
nnoremap <leader>B :TagbarToggle<CR>
" Toggle bufxplorer
nnoremap <leader>E :BufExplorer<CR>
" Toggle Ack
nnoremap <leader>a <Esc>:Ack!
" Toggle nerdcommenter comments C-_ is actually C-/
nmap <C-_> <leader>c<Space>
vmap <C-_> <leader>c<Space>

" Delete a line
nnoremap <C-d> dd
" Easy escape
inoremap <leader>. <Esc>

" Remove trailing whitespaces
" autocmd BufWritePre * :%s/\s\+$//e

" Return to last edit position when opening files
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal! g`\"" |
            \ endif

" Force write file as sudo hack
cmap w!! w !sudo tee > /dev/null %

" autocmd VimEnter * NERDTree

set t_Co=256
set background=dark
colorscheme slate

" Flake8 on write
"autocmd BufWritePost *.py call Flake8()

autocmd BufRead,BufNewFile *.jsm set filetype=javascript

" Go
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>s <Plug>(go-test)
