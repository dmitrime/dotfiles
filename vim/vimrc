set nocompatible
set modelines=0
filetype off

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')
" LSP
Plug 'neovim/nvim-lspconfig'
Plug 'kabouzeid/nvim-lspinstall'
Plug 'nvim-lua/lsp-status.nvim'
Plug 'ray-x/lsp_signature.nvim'

" Telescope
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-telescope/telescope-fzy-native.nvim'

" TreeSitter 
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/nvim-treesitter-refactor'

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'hrsh7th/nvim-compe'
Plug 'windwp/nvim-autopairs'

Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Themes
Plug 'morhetz/gruvbox'
Plug 'arcticicestudio/nord-vim'
Plug 'altercation/vim-colors-solarized'
" Initialize plugin system
call plug#end()


filetype plugin indent on
set encoding=utf-8
syn on

" Tabs
set shiftwidth=4
set tabstop=4
set expandtab

" Indent
set autoindent
" Show curson row,col
set ruler
" Show line numbers
set number
" Fast terminal connection
set ttyfast
" Command completion menu on tab
set wildmenu
" Current cursor line
"set cursorline
" Show command being currently typed
set showcmd
" Place a marker when folding
set foldmethod=marker
" Scroll +2 lines
set scrolloff=2
" Hidden buffer
set hidden

" Undo files even after saving
set undofile
set undodir=~/.vim/sessions/undo
" Backup dir
set backupdir=~/.vim/sessions
set dir=~/.vim/sessions

" Comma leader
let mapleader=","
" Go to row + col for mark
nnoremap ' `

" color theme
set termguicolors
set background=dark
colorscheme gruvbox

" Use OSX clipboard to copy and to paste
set clipboard+=unnamedplus

" Search
" Ignore case...
set ignorecase
" But use case when there is uppercase in string
set smartcase
" Incremental search with match-as-you-type
set incsearch
set showmatch
" No highlighting
set nohlsearch
" Paste toggle
set pastetoggle=<F2>

" Substitute globally on lines
set gdefault

" Wrap lines
" set wrap
"set textwidth=79

" Stop hitting F1 when aiming for ESC
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Make ; be : in normal mode
nnoremap ; :

" Just like D
nnoremap Y y$

" Quickly select pasted text
nnoremap <leader>v V`]
" Quickly open ~/.vimrc
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>
nnoremap <leader>ez <C-w><C-v><C-l>:e ~/.zshrc<cr>
" Quick vertical split window
nnoremap <leader>w <C-w>v<C-w>l
" Quick horizontal split window
nnoremap <leader>W <C-w>s
" Move around windows easier
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Make window wider or narrower
nnoremap <C-W>h 10<C-W><
nnoremap <C-W>l 10<C-W>>
nnoremap <C-W>j 10<C-w>-
nnoremap <C-W>k 10<C-w>+

" Buffers
nnoremap <leader>b :buffers<CR>
nnoremap <leader>c :bnext<CR>
nnoremap <leader>x :bprev<CR>
nnoremap <leader>d :bp\|bd #<CR>
nnoremap <leader>D :b#<CR>

" Telescope
nnoremap <leader>t  <cmd>Telescope find_files<cr>
nnoremap <leader>tl <cmd>Telescope live_grep<cr>
nnoremap <leader>tg <cmd>Telescope grep_string<cr>
nnoremap <leader>tb <cmd>Telescope buffers<cr>
nnoremap <leader>ta <cmd>Telescope lsp_code_actions<cr>
vnoremap <leader>ta <cmd>Telescope lsp_range_code_actions<cr>
vnoremap <leader>td <cmd>Telescope lsp_document_diagnostics<cr>
vnoremap <leader>tw <cmd>Telescope lsp_workspace_diagnostics<cr>
nnoremap <leader>tt <cmd>Telescope lsp_type_definitions<cr>
nnoremap gd    <cmd>Telescope lsp_definitions<cr>
nnoremap <C-]> <cmd>Telescope lsp_definitions<cr>
nnoremap gi    <cmd>Telescope lsp_implementations<cr>
nnoremap gr    <cmd>Telescope lsp_references<cr>

" set autochdir
" Toggle Ack
nnoremap <leader>a <Esc>:Ack!
" Toggle nerdcommenter comments C-_ is actually C-/
nmap <C-_> <leader>c<Space>
vmap <C-_> <leader>c<Space>

" Delete word backward
nnoremap dW vb"_d
" Delete a line
nnoremap <C-d> dd
" Easy escape
inoremap <leader>. <Esc>

" Remove trailing whitespaces
" autocmd BufWritePre * :%s/\s\+$//e

" Return to last edit position when opening files
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal! g`\"" |
            \ endif

" Force write file as sudo hack
cmap w!! w !sudo tee > /dev/null %

" Flake8 on write
"autocmd BufWritePost *.py call Flake8()
autocmd BufRead,BufNewFile *.jsm set filetype=javascript

" Go
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>s <Plug>(go-test)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>gd <Plug>(go-doc)
" Go autoformatting
autocmd BufWritePre *.go lua vim.lsp.buf.formatting()
" Go autoimports
autocmd BufWritePre *.go lua goimports(1000)

let g:paredit_mode = 1
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%

" Lua configs

lua << EOF
require('lspinstall_conf')
-- require('nvim-autopairs_conf')
require('telescope_conf')
require('treesitter_conf')
EOF
